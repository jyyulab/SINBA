% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SINBA.functions_0.1.4.R
\name{draw.NetBID_SINBA}
\alias{draw.NetBID_SINBA}
\title{draw.NetBID_SINBA}
\usage{
draw.NetBID_SINBA(
  DE = NULL,
  name_col = NULL,
  profile_col = NULL,
  profile_trend = "pos2neg",
  seed_driver = NULL,
  partner_driver_list = NULL,
  seed_driver_label = NULL,
  partner_driver_label = NULL,
  driver_DA_Z = NULL,
  driver_DE_Z = NULL,
  target_list = NULL,
  target_list_merge = NULL,
  DA_Z_merge = NULL,
  diff_Z = NULL,
  top_driver_number = 10,
  top_order = "merge",
  target_nrow = 2,
  target_col = "RdBu",
  target_col_type = "PN",
  left_annotation = "",
  right_annotation = "",
  main = "",
  profile_sig_thre = 0,
  Z_sig_thre = 1.64,
  pdf_file = NULL
)
}
\arguments{
\item{DE}{data.frame,the differentiated expression results.
This data.frame could be generated by using \code{getDE.limma.2G} or \code{getDE.BID.2G}.
If user want to generate this data.frame by other strategies, the rownames must be the gene names or need one column to be the gene name
(set in \code{name_col}) and must contain the columns indicating the differentiated expression profile.}

\item{name_col}{character, the name of the column in \code{DE}, which contains the gene name. If NULL, will use the rownames of \code{DE}.
Default is NULL.}

\item{profile_col}{character, the name of the column in \code{DE}, which will be used as the differentiated expression profile.
If DE is created by \code{getDE.limma.2G} or \code{getDE.BID.2G}, this parameter could be 'logFC' or 't'.}

\item{profile_trend}{character, the choice of how to display the profile, from high/positive to low/negative ('pos2neg')
or low/negative to high/positive ('neg2pos').Default is 'pos2neg'.}

\item{seed_driver}{character, name for the seed driver.}

\item{partner_driver_list}{a vector of characters, name for the partner driver list.}

\item{seed_driver_label}{character, label for the seed driver displayed on the plot. Default is seed_driver.}

\item{partner_driver_label}{a vector of characters, label for the partner driver list displayed on the plot. Default is partner_driver_list}

\item{driver_DA_Z}{a vector of numeric values, the Z statistics of differentiated activity (DA) for the driver list.
Better to give name to the vector, otherwise will automatically use driver list (seed + partner) as the name.}

\item{driver_DE_Z}{a vector of numeric values, the Z statistics of differentiated expression (DE) for the driver list.
Better to give name to the vector, otherwise will automatically use driver list (seed + partner) as the name.}

\item{target_list}{a list for the target gene information for the drivers. The names for the list must contain the driver in driver list (seed + partner)
Each object in the list must be a data.frame and should contain one column ("target") to save the target genes.
Strongly suggest to follow the NetBID2 pipeline, and the \code{target_list} could be automatically generated by \code{get_net2target_list} by
running \code{get.SJAracne.network}.}

\item{target_list_merge}{a list for the target gene information for thecombination of the seed driver to partner drivers saperately.
The names for the list must contain the driver in partner_driver_list
Each object in the list must be a data.frame and should contain one column ("target") to save the target genes.
Strongly suggest to follow the NetBID2 pipeline, and the \code{target_list_merge} could be automatically generated by \code{merge_target_list}.}

\item{DA_Z_merge}{a vector of numeric values, the Z statistics of differentiated activity (DA) for the combination of the seed driver to partner drivers saperately.
Better to give name to the vector, otherwise will automatically use partner driver list as the name.}

\item{top_driver_number}{numeric, number for the top significant partner drivers to be displayed on the plot. Default is 10.}

\item{top_order}{character, choice of order pattern used to display the partner drivers. Two options,'merge' or 'diff'.
'merge' means the partner drivers will be sorted by the combined Z statistics.
'diff' means the partner drivers will be sorted by the delta Z statistics.
Default is 'merge'.}

\item{target_nrow}{numeric, number of rows for each driver display on the plot. Two options, 1 or 2.
If set to 1, the target genes' position on the profile will be displayed in one row.
If set to 2, the target genes' position on the profile will be displayed in two rows,
with positive regulated genes displayed on the first row and negative regulated genes displayed on the second row.
Default is 2.}

\item{target_col}{character, choice of color pattern used to display the targets. Two options,'black' or 'RdBu'.
If set to 'black', the lines will be colored in black.
If set to 'RdBu', the lines will be colored into Red to Blue color bar.
If \code{target_col_type} is set as 'PN', the positive regulated genes will be colored in red and negative regulated genes in blue.
If \code{target_col_type} is set as 'DE', the color for the target genes is set according to its value in the differentiated expression profile,
with significant high set for red and low for blue. The significant threshold is set by \code{profile_sig_thre}.
Default is 'RdBu'.}

\item{target_col_type}{character, choice of the pattern used to display the color for target genes, only work when \code{target_col} is set as 'RdBu'.
Two options,'PN' or 'DE'.
If set as 'PN', the positive regulated genes will be colored in red and negative regulated genes in blue.
If set as 'DE', the color for the target genes is set according to its value in the differentiated expression profile,
Default is 'PN'.}

\item{left_annotation}{character, annotation displayed on the left of the figure representing left condition of the rank_profile. Default is "".}

\item{right_annotation}{character, annotation displayed on the right of the figure representing right condition of the rank_profile. Default is "".}

\item{main}{character, title for the plot. Default is "".}

\item{profile_sig_thre}{numeric, threshold for the absolute values in profile to be treated as significance.
Target genes without signifcant values in the profile will be colored in grey. Only work when \code{target_col_type} is set as "DE" and \code{target_col} is set as "RdBu".
Default is 0.}

\item{Z_sig_thre}{numeric, threshold for the Z statistics in \code{driver_DA_Z} and \code{driver_DE_Z} to be treated as signifcance.
Only signifcant values will have background color. Default is 1.64.}

\item{pdf_file}{character, file path for the pdf file to save the figure into pdf format.If NULL, will not generate pdf file. Default is NULL.}
}
\value{
logical value indicating whether the plot has been successfully generated
}
\description{
GSEA (gene set enrichment analysis) plot for the Synergy Inference by data-driven Network-based Bayesian Analysis (SINBA) analysis results.

\code{draw.GSEA.NetBID.SINBA} will generate a GSEA plot for Synergy Inference by data-driven Network-based Bayesian Analysis (SINBA)
analysis results. SINBA calculates the synergistic effect between a seed driver and a partner driver.
The plot includes the GSEA plot for the seed driver and the partner driver independently and
the GSEA plot for the combination for the seed driver to each partner driver.
The statistics on the plot include the differentiated expression (DE), differentiated activity (DA) for each driver,
and the different Z (deltaZ) showing the difference between the combination of the seed and the partner driver to the sum of the original Z statistics.

This is a plot function to draw GSEA for synergistic effect prediction between the seed driver and a list of partner drivers.
User need to input the differentiated expression information, and choose to display the target genes in one row or two rows, by selecting black color or red to blue color bar.
}
\examples{
\dontrun{
analysis.par <- list()
analysis.par$out.dir.DATA <- system.file('demo1','driver/DATA/',package = "NetBID2")
NetBID.loadRData(analysis.par=analysis.par,step='ms-tab')
ms_tab <- analysis.par$final_ms_tab
sig_driver <- draw.volcanoPlot(dat=ms_tab,label_col='gene_label',
                               logFC_col='logFC.G4.Vs.others_DA',
                               Pv_col='P.Value.G4.Vs.others_DA',
                               logFC_thre=0.4,
                               Pv_thre=1e-7,
                               main='Volcano Plot for G4.Vs.others_DA',
                               show_label=FALSE,
                               label_type = 'origin',
                               label_cex = 0.5)
driver_list <- rownames(sig_driver)
## choose seed driver and partner driver list
seed_driver <- driver_list[1]
part_driver <- ms_tab$originalID_label
## get merge target
merge_target <- lapply(part_driver,function(x){
  m1 <- merge_target_list(driver1=seed_driver,driver2=x,
                          target_list=analysis.par$merge.network$target_list)
})
names(merge_target) <- part_driver
## get activity matrix for the merge target network
ac_combine_mat <- cal.Activity(all_target=merge_target,
                               cal_mat=exprs(analysis.par$cal.eset),
                               es.method='weightedmean')
## get DA for the combined drivers
comp_name <- 'G4.Vs.others'
G0  <- rownames(phe_info)[which(phe_info$`subgroup`!='G4')]
# get sample list for G0
G1  <- rownames(phe_info)[which(phe_info$`subgroup`=='G4')]
# get sample list for G1
DA_driver_combine <- getDE.limma.2G(eset=generate.eset(ac_combine_mat),
                                    G1=G1,G0=G0,
                                    G1_name='G4',G0_name='others')
## or use: DA_driver_combine <- getDE.BID.2G(eset=generate.eset(ac_combine_mat),
                                    G1=G1,G0=G0,
                                    G1_name='G4',G0_name='others')
## prepare for SINBA input
ori_part_Z <- analysis.par$DA[[comp_name]][part_driver,'Z-statistics']
ori_seed_Z <- analysis.par$DA[[comp_name]][seed_driver,'Z-statistics']
DE <- analysis.par$DE[[comp_name]]
driver_DA_Z <- analysis.par$DA[[comp_name]][,'Z-statistics']
names(driver_DA_Z) <- rownames(analysis.par$DA[[comp_name]])
driver_DE_Z <- analysis.par$DE[[comp_name]][,'Z-statistics']
names(driver_DE_Z) <- rownames(analysis.par$DE[[comp_name]])
DA_Z_merge <- DA_driver_combine[,'Z-statistics']
names(DA_Z_merge) <- rownames(DA_driver_combine)
target_list_merge <- merge_target
seed_driver_label <- ms_tab[seed_driver,'gene_label']
partner_driver_list <- part_driver
profile_col <- 't'
partner_driver_label <- ms_tab[partner_driver_list,'gene_label']
target_list <- analysis.par$merge.network$target_list
draw.NetBID_SINBA(DE=DE,profile_col = profile_col,
                       seed_driver=seed_driver,
                       partner_driver_list=partner_driver_list,
                       seed_driver_label=seed_driver_label,
                       partner_driver_label=partner_driver_label,
                       driver_DA_Z=driver_DA_Z,driver_DE_Z=driver_DE_Z,
                       target_list=target_list,
                       DA_Z_merge=DA_Z_merge,
                       target_list_merge=target_list_merge,
                       top_driver_number=20,profile_trend='pos2neg',
                       top_order='merge',Z_sig_thre = 1.64,
                       target_nrow=1,target_col='RdBu',target_col_type='PN',
                       pdf_file=sprintf('\%s/NetBID_GSEA_SINBA_demo1.pdf',
                       analysis.par$out.dir.PLOT))
}
}
