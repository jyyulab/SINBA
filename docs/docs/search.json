[{"path":"https://jingl87.github.io/SINBA/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 LICENSE Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jingl87.github.io/SINBA/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jingjing Liu. Author, maintainer. Yu Lab @ St Jude Children's Research Hospital. Funder.","code":""},{"path":"https://jingl87.github.io/SINBA/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Liu J (2025). SINBA: Synergy inference data-driven network-based Bayesian analysis. R package version 1.0 https://jingl87.github.io/SINBA/, https://jingl87.github.io/SINBA/.","code":"@Manual{,   title = {SINBA: Synergy inference by data-driven network-based Bayesian analysis},   author = {Jingjing Liu},   year = {2025},   note = {R package version 1.0 https://jingl87.github.io/SINBA/},   url = {https://jingl87.github.io/SINBA/}, }"},{"path":[]},{"path":"https://jingl87.github.io/SINBA/index.html","id":"background","dir":"","previous_headings":"","what":"Background","title":"Synergy inference by data-driven network-based Bayesian analysis","text":"Synergy inference data-driven network-based Bayesian analysis(SINBA) used bridge novel discoveries network-based systems biology reverse pharmacology. SINBA tremendously reduce time resource cost conventional combination screening. SINBA also integrated blood-brain barrier penetrated drug-target database, expedite drug discovery CNS tumors.","code":""},{"path":"https://jingl87.github.io/SINBA/index.html","id":"package-structure","dir":"","previous_headings":"","what":"Package structure","title":"Synergy inference by data-driven network-based Bayesian analysis","text":"SINBA(1.0)","code":""},{"path":"https://jingl87.github.io/SINBA/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Synergy inference by data-driven network-based Bayesian analysis","text":"Require R >= 3.5.0. install github install local file","code":"devtools::install_github(\"jyyulab/SINBA\",auth_token = \"your auth_token\", lib=\"your lib path\") pkg.dir <- \"/Volumes/project_space/yu3grp/software_JY/yu3grp/git_repo/SINBA\" #\"/research/projects/yu3grp/software_JY/yu3grp/git_repo/SINBA_1.O\" devtools::install_local(sprintf(\"%s/SINBA_0.0.1.0.tar.gz\",pkg.dir),lib=\"your lib path\")"},{"path":"https://jingl87.github.io/SINBA/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Synergy inference by data-driven network-based Bayesian analysis","text":"Instruction, documentation, tutorials can found : https://jingl87.github.io/SINBA/","code":""},{"path":"https://jingl87.github.io/SINBA/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Synergy inference by data-driven network-based Bayesian analysis","text":"Comprehensive Drug-Gene Interaction Resources: Includes six curated drug-gene interaction databases, featuring blood-brain barrier penetrant drug database (BPdb), supports selection CNS-specific drugs. Integrated Gene-Gene Interaction Network: Facilitates inference disease subgroup-specific driver genes. drivers may identifiable genetic alterations can “hidden” regulators affected epigenetic, post-transcriptional, post-translational mechanisms. Synergy Discovery Platform: Harnesses strengths silico prediction high-throughput screening identify novel synergistic drug pairs.","code":""},{"path":"https://jingl87.github.io/SINBA/index.html","id":"credits-and-historical-remarks","dir":"","previous_headings":"","what":"Credits and historical remarks","title":"Synergy inference by data-driven network-based Bayesian analysis","text":"companion packages data portals NetBID SJARACNe Medulloblastoma SINBA portal Medulloblastoma patient scRNA-seq Cerebellum Glutemetergic lineage developmental reference","code":""},{"path":[]},{"path":"https://jingl87.github.io/SINBA/reference/ChEMBL_drugphase_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"ChEMBL_drugphase_levels — ChEMBL_drugphase_levels","title":"ChEMBL_drugphase_levels — ChEMBL_drugphase_levels","text":"drug phases used ChEMBL. Users can select sepecific drug phase","code":""},{"path":"https://jingl87.github.io/SINBA/reference/ChEMBL_drugphase_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ChEMBL_drugphase_levels — ChEMBL_drugphase_levels","text":"","code":"ChEMBL_drugphase_levels()"},{"path":"https://jingl87.github.io/SINBA/reference/ChEMBL_drugphase_levels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ChEMBL_drugphase_levels — ChEMBL_drugphase_levels","text":"","code":"ChEMBL_drugphase_levels() #> [1] \"0\" \"1\" \"2\" \"3\" \"4\""},{"path":"https://jingl87.github.io/SINBA/reference/Drugbank_drugphase_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Drugbank_drugphase_levels — Drugbank_drugphase_levels","title":"Drugbank_drugphase_levels — Drugbank_drugphase_levels","text":"drug phases used drugbank. Users can select sepecific drug phase","code":""},{"path":"https://jingl87.github.io/SINBA/reference/Drugbank_drugphase_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drugbank_drugphase_levels — Drugbank_drugphase_levels","text":"","code":"Drugbank_drugphase_levels()"},{"path":"https://jingl87.github.io/SINBA/reference/Drugbank_drugphase_levels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drugbank_drugphase_levels — Drugbank_drugphase_levels","text":"","code":"Drugbank_drugphase_levels() #> [1] \"approved\"        \"experimental\"    \"illicit\"         \"investigational\" #> [5] \"nutraceutical\"   \"vet_approved\"    \"withdrawn\""},{"path":"https://jingl87.github.io/SINBA/reference/ROCTest.html","id":null,"dir":"Reference","previous_headings":"","what":"ROCTest — ROCTest","title":"ROCTest — ROCTest","text":"AUC value 1 means expression values gene alone can perfectly classify two groupings (.e. samples G1 exhibit higher level samples G2). AUC value 0 also means perfect classification, direction. value 0.5 implies gene predictive power classify two groups.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/ROCTest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ROCTest — ROCTest","text":"","code":"ROCTest(eset, G0, G1, verbose = TRUE)"},{"path":"https://jingl87.github.io/SINBA/reference/ROCTest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ROCTest — ROCTest","text":"Returns 'predictive power' (abs(AUC-0.5) * 2) ranked matrix putative differentially expressed genes/driver.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/ROCTest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ROCTest — ROCTest","text":"ROC-based driver test","code":""},{"path":"https://jingl87.github.io/SINBA/reference/ROCTest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ROCTest — ROCTest","text":"","code":"pair.AUC<-list() single.AUC<-list() for(i in 1:dim(comps)[1]){  comp_name <- sprintf('%s.Vs.%s',comps[i,1],comps[i,2]) ## each comparison must give a name !!!  G0  <- rownames(phe_info)[which(phe_info$group==comps[i,2])] # get sample list for G0  G1  <- rownames(phe_info)[which(phe_info$group==comps[i,1])] # get sample list for G1  pair.AUC[[comp_name]]<-ROCTest(eset=SINBA.par$SINBA_AC.eset,G0=G0,G1=G1)  single.AUC[[comp_name]]<-ROCTest(eset=SINBA.par$single_AC.eset,G0=G0,G1=G1)} #> Error: object 'comps' not found if (FALSE) { # \\dontrun{ } # }"},{"path":"https://jingl87.github.io/SINBA/reference/Repurposing_HUB_drugphase_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Repurposing_HUB_drugphase_levels — Repurposing_HUB_drugphase_levels","title":"Repurposing_HUB_drugphase_levels — Repurposing_HUB_drugphase_levels","text":"drug phases used Repurposing HUB. Users can select sepecific drug phase","code":""},{"path":"https://jingl87.github.io/SINBA/reference/Repurposing_HUB_drugphase_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repurposing_HUB_drugphase_levels — Repurposing_HUB_drugphase_levels","text":"","code":"Repurposing_HUB_drugphase_levels()"},{"path":"https://jingl87.github.io/SINBA/reference/Repurposing_HUB_drugphase_levels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repurposing_HUB_drugphase_levels — Repurposing_HUB_drugphase_levels","text":"","code":"Repurposing_HUB_drugphase_levels() #> [1] \"Launched\"        \"Phase 1\"         \"Phase 1/Phase 2\" \"Phase 2\"         #> [5] \"Phase 2/Phase 3\" \"Phase 3\"         \"Preclinical\"     \"Withdrawn\""},{"path":"https://jingl87.github.io/SINBA/reference/SINBA.analysis.dir.create.html","id":null,"dir":"Reference","previous_headings":"","what":"SINBA.analysis.dir.create — SINBA.analysis.dir.create","title":"SINBA.analysis.dir.create — SINBA.analysis.dir.create","text":"SINBA.analysis.dir.create used help users create organized working directory SINBA analysis.However, essential analysis.creates hierarchcial working directory returns list contains directory information. function needs users define main working directory project's name. creates main working directory subdirectory project. also automatically creates three subfolders (QC, DATA PLOT) within project folder. QC/, storing Quality Control related plots; DATA/, saving data RData format; PLOT/, storing plot files generated analysis","code":""},{"path":"https://jingl87.github.io/SINBA/reference/SINBA.analysis.dir.create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SINBA.analysis.dir.create — SINBA.analysis.dir.create","text":"","code":"SINBA.analysis.dir.create(   project_main_dir = NULL,   project_name = NULL,   tf.network.file = NULL,   sig.network.file = NULL )"},{"path":"https://jingl87.github.io/SINBA/reference/SINBA.analysis.dir.create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SINBA.analysis.dir.create — SINBA.analysis.dir.create","text":"project_main_dir character, name absolute path main working directory. project_name character, name project folder. tf.network.file character, path TF network file. sig.network.file character, path SIG network file.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/SINBA.analysis.dir.create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SINBA.analysis.dir.create — SINBA.analysis.dir.create","text":"","code":"if (FALSE) { # \\dontrun{ # Creating a main working directory under the current working directory by folder name SINBA.par <- SINBA.analysis.dir.create(\"MyMainDir\",\"MyProject\") } # }"},{"path":"https://jingl87.github.io/SINBA/reference/SINBA.loadRData.html","id":null,"dir":"Reference","previous_headings":"","what":"SINBA.loadRData — SINBA.loadRData","title":"SINBA.loadRData — SINBA.loadRData","text":"SINBA.loadRData function reloads RData saved SINBA.saveRData function. prevents user repeating former pipeline steps.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/SINBA.loadRData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SINBA.loadRData — SINBA.loadRData","text":"","code":"SINBA.loadRData(SINBA.par = NULL, step = \"pre-load\")"},{"path":"https://jingl87.github.io/SINBA/reference/SINBA.loadRData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SINBA.loadRData — SINBA.loadRData","text":"SINBA.par list, stores related datasets driver selection driver combination prediction pipeline step. step character, name pipeline step decided user easier reference.previously assigned user calling SINBA.saveRData function.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/SINBA.loadRData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SINBA.loadRData — SINBA.loadRData","text":"","code":"if (FALSE) { # \\dontrun{ SINBA.par <- list() SINBA.par$out.dir.DATA <- system.file('demo1','/DATA/',package = \"SINBA\") SINBA.loadRData(SINBA.par=SINBA.par,step='pre-load') SINBA.saveRData(SINBA.par=SINBA.par,step='pre-load') } # }"},{"path":"https://jingl87.github.io/SINBA/reference/SINBA.saveRData.html","id":null,"dir":"Reference","previous_headings":"","what":"SINBA.saveRData — SINBA.saveRData","title":"SINBA.saveRData — SINBA.saveRData","text":"SINBA.saveRData function save complicated list object generated certain steps SINBA pipeline (e.g. load network files, 'pre-load', load expression files, 'exp-load', calculate driver pairs activity 'combo-AC', predict drug pairs table 'ms-tab').function essential, highly suggested easier pipeline step checkout reference. Assigning step name save RData easier reference. Calling SINBA.loadRData load corresponding step RData, users can avoid repeating former steps.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/SINBA.saveRData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SINBA.saveRData — SINBA.saveRData","text":"","code":"SINBA.saveRData(SINBA.par = NULL, step = \"pre-load\")"},{"path":"https://jingl87.github.io/SINBA/reference/SINBA.saveRData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SINBA.saveRData — SINBA.saveRData","text":"SINBA.par list, stores related datasets driver selection driver combination prediction pipeline step. step character, name pipeline step decided user easier reference.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/SINBA.saveRData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SINBA.saveRData — SINBA.saveRData","text":"","code":"if (FALSE) { # \\dontrun{ SINBA.par <- list() SINBA.par$out.dir.DATA <- system.file('demo1','/DATA/',package = \"SINBA\") SINBA.loadRData(SINBA.par=SINBA.par,step='pre-load') SINBA.saveRData(SINBA.par=SINBA.par,step='pre-load') } # }"},{"path":"https://jingl87.github.io/SINBA/reference/cal.SINBA.Activity.html","id":null,"dir":"Reference","previous_headings":"","what":"cal.SINBA.Activity — cal.SINBA.Activity","title":"cal.SINBA.Activity — cal.SINBA.Activity","text":"function Calculate Activity Value Driver seed-partner pairs.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/cal.SINBA.Activity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cal.SINBA.Activity — cal.SINBA.Activity","text":"","code":"cal.SINBA.Activity(   SINBA_originalID = NULL,   target_list = NULL,   cal_mat = NULL,   es.method = \"weightedmean\",   std = TRUE )"},{"path":"https://jingl87.github.io/SINBA/reference/cal.SINBA.Activity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cal.SINBA.Activity — cal.SINBA.Activity","text":"SINBA_originalID character vector return data frame generated combineNet2target_list return_type=\"SINBA_originalID\". SINBA_originalID contains seed-partner driver pairs; seed gene name partner gene name seperated colon. SINBA_originalID optional. target_list list, driver--target list object.target_list generated get.combined.network contains driver gene regulons. cal_mat numeric matrix, expression matrix genes/transcripts. es.method character, method applied calculate activity value. User can choose c (\"mean\", \"weightedmean\", \"maxmean\", \"absmean\", \"max\" \"min\"). Default \"weightedmean\". std logical, TRUE, expression matrix normalized column. Default TRUE.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/cal.SINBA.Activity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"cal.SINBA.Activity — cal.SINBA.Activity","text":"","code":"sinba_originalID<-combineNet2target_list(target_list=SINBA.par$combined.network$target_list,seed_name=\"LCK\",partner_name=c(\"BCL2\",\"FYN\",\"STAT3\",\"PTCRA\"),return_type=\"SINBA_originalID\") #> Error: object 'SINBA.par' not found cal_mat<-Biobase::exprs(SINBA.par$cal.eset) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'object' in selecting a method for function 'exprs': object 'SINBA.par' not found sinba_ac_mat<-cal.SINBA.Activity(SINBA_originalID=sinba_originalID,target_list=SINBA.par$combined.network$target_list,cal_mat=cal_mat) #> Error: object 'cal_mat' not found single_ac_mat<-cal.SINBA.Activity(target_list=SINBA.par$combined.network$target_list,cal_mat=cal_mat) #> Error: object 'cal_mat' not found if (FALSE) { # \\dontrun{ } # }"},{"path":"https://jingl87.github.io/SINBA/reference/combineNet2target_list.html","id":null,"dir":"Reference","previous_headings":"","what":"combineNet2target_list — combineNet2target_list","title":"combineNet2target_list — combineNet2target_list","text":"function create combined target list seed-partner driver pairs.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/combineNet2target_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"combineNet2target_list — combineNet2target_list","text":"","code":"combineNet2target_list(   target_list = NULL,   seed_name = NULL,   partner_name = NULL,   return_type = \"SINBA_originalID\" )"},{"path":"https://jingl87.github.io/SINBA/reference/combineNet2target_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"combineNet2target_list — combineNet2target_list","text":"target_list list, driver--target list object.target_list generated get.combined.network contains driver gene regulons. seed_name driver genes used seed combination, must included target_list partner_name optional, partner driver genes used partner combination. default setting use drivers except seed gene target_list. return_type character,type return data. User can choose \"SINBA_target_list\" \"SINBA_originalID\". Default \"SINBA_originalID\", returns combination originalID name downstream activity calculation, \"SINBA_target_list\" returns full combination target list.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/combineNet2target_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"combineNet2target_list — combineNet2target_list","text":"","code":"out_net_file1<-\"path1_to_network_file/consensus_network_ncol_.txt\" out_net_file2<-\"path2_to_network_file/consensus_network_ncol_.txt\" net1  <- get.single.network(network_file=out_net_file1) #> Warning: cannot open file 'path1_to_network_file/consensus_network_ncol_.txt': No such file or directory #> Error in file(file, \"rt\"): cannot open the connection net2  <- get.single.network(network_file=out_net_file2) #> Warning: cannot open file 'path2_to_network_file/consensus_network_ncol_.txt': No such file or directory #> Error in file(file, \"rt\"): cannot open the connection combined.network<-get.combined.network(network1=net1,network2=net2) #> Error: object 'net1' not found sinba_target_list<-combineNet2target_list(target_list=combined.network$target_list,seed_name=\"LCK\") #> Error: object 'combined.network' not found sinba_target_list<-combineNet2target_list(target_list=SINBA.par$combined.network$target_list,seed_name=\"LCK\",partner_name=c(\"BCL2\",\"FYN\"),return_type=\"SINBA_target_list\") #> Error: object 'SINBA.par' not found sinba_originalID<-combineNet2target_list(target_list=SINBA.par$combined.network$target_list,seed_name=\"LCK\",partner_name=c(\"BCL2\",\"FYN\"),return_type=\"SINBA_originalID\") #> Error: object 'SINBA.par' not found if (FALSE) { # \\dontrun{ } # }"},{"path":"https://jingl87.github.io/SINBA/reference/combine_names.html","id":null,"dir":"Reference","previous_headings":"","what":"combine_names — combine_names","title":"combine_names — combine_names","text":"combine_names","code":""},{"path":"https://jingl87.github.io/SINBA/reference/combine_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"combine_names — combine_names","text":"","code":"combine_names(x, target_list, partner_name)"},{"path":"https://jingl87.github.io/SINBA/reference/combine_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"combine_names — combine_names","text":"x seed gene name included target list target_list target_list list contain regulons partner_name partner genes combination","code":""},{"path":"https://jingl87.github.io/SINBA/reference/combine_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"combine_names — combine_names","text":"Return comination name list. seed partner genes seperated colon.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/convert_deltaZ2_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"convert_deltaZ2_matrix — convert_deltaZ2_matrix","title":"convert_deltaZ2_matrix — convert_deltaZ2_matrix","text":"Convert dataframe selected columns(including deltaZ score column) matrix.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/convert_deltaZ2_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert_deltaZ2_matrix — convert_deltaZ2_matrix","text":"","code":"convert_deltaZ2_matrix(   df,   use_row.col,   use_column.col,   deltaZ.col,   use_method = \"max\" )"},{"path":"https://jingl87.github.io/SINBA/reference/convert_deltaZ2_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert_deltaZ2_matrix — convert_deltaZ2_matrix","text":"df data frame deltaZ scores,  created run generate.masterTable.SINBA . use_row.col column name df used rows output matrix. use_column.col colum name df used columns output matrix. deltaZ.col column name deltaZ scores, values used output matrix. use_method method used aggregate deltaZ values seed/partner drivers. Options: \"max\", \"mean\", \"min\" \"median\". default=\"max\"","code":""},{"path":"https://jingl87.github.io/SINBA/reference/convert_deltaZ2_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"convert_deltaZ2_matrix — convert_deltaZ2_matrix","text":"","code":"ms_tab<-SINBA.par$ms_tab #> Error: object 'SINBA.par' not found df<-convert_deltaZ2_matrix(df=ms_tab,use_row.col=\"SINBA.seed_geneSymbol\",use_column.col=\"SINBA.partner_geneSymbol\",deltaZ.col=\"delta_Z.G3.Vs.others_SINBA\",use_method=\"max\") #> Error: object 'ms_tab' not found if (FALSE) { # \\dontrun{ } # }"},{"path":"https://jingl87.github.io/SINBA/reference/draw.GSEA_SINBA.html","id":null,"dir":"Reference","previous_headings":"","what":"draw.GSEA_SINBA — draw.GSEA_SINBA","title":"draw.GSEA_SINBA — draw.GSEA_SINBA","text":"GSEA (Gene Set Enrichment Analysis) Plot seed, partner combined Seed-partner regulons.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/draw.GSEA_SINBA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"draw.GSEA_SINBA — draw.GSEA_SINBA","text":"","code":"draw.GSEA_SINBA(   rank_profile = NULL,   use_genes_SINBA = NULL,   use_genes_seed = NULL,   use_genes_partner = NULL,   use_direction = TRUE,   use_direction_SINBA = NULL,   use_direction_seed = NULL,   use_direction_partner = NULL,   main = \"\",   pdf_file = NULL,   annotation = NULL,   annotation_cex = 1.2,   left_annotation = NULL,   right_annotation = NULL )"},{"path":"https://jingl87.github.io/SINBA/reference/draw.GSEA_SINBA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"draw.GSEA_SINBA — draw.GSEA_SINBA","text":"rank_profile named vector numerics, differential values (DE DA) calculated sample comparison. Names vector must gene names.differential values can \"logFC\", \"t-statistics\" \"Z-statistics\". use_genes_SINBA vector characters, vector genes display. genes targe genes seed-partner pair. Seed-partner regulon can generated combineNet2target_list (return_type=\"SINBA_target_list\") use_genes_seed vector characters, vector genes display. genes targe genes seed driver. use_genes_partner vector characters, vector genes display. genes targe genes partner driver. use_direction logical value, TRUE, target direction values need provided user. default value TRUE. use_direction_SINBA vector numeric 1s -1s, 1 positive regulation seed-partner pair, -1 negative regulation seed-partner pair. Users can get vector converting signs \"spearman\". NULL, regulation direction displayed. Default NULL. use_direction_seed vector numeric 1s -1s, 1 positive regulation seed, -1 negative regulation seed. Users can get vector converting signs \"spearman\". NULL, regulation direction displayed. Default NULL. use_direction_partner vector numeric 1s -1s, 1 positive regulation partner, -1 negative regulation partner. Users can get vector converting signs \"spearman\". NULL, regulation direction displayed. Default NULL. main character, overall title plot. Default \"\". pdf_file character, file path save PDF file. NULL, PDF file saved. Default NULL. annotation character, annotation set users easier reference. Normally annotation P-value statistics show significance interested seed-partner driver pairs.NULL, perform Kolmogorov-Smirnov test get significance value. Default NULL. annotation_cex numeric, giving amount text annotation magnified relative default. Default 1.2. left_annotation character, annotation displayed left figure, representing left condition rank_profile. Default \"\". right_annotation character, annotation displayed right figure, representing right condition rank_profile. Default \"\".","code":""},{"path":"https://jingl87.github.io/SINBA/reference/draw.GSEA_SINBA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"draw.GSEA_SINBA — draw.GSEA_SINBA","text":"Return logical value. TRUE, plot created successfully.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/draw.GSEA_SINBA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"draw.GSEA_SINBA — draw.GSEA_SINBA","text":"","code":"lck_fyn<-combineNet2target_list(target_list=SINBA.par$sinba.network$target_list,seed_name=\"LCK\",partner_name=\"FYN\",return_type=\"SINBA_target_list\") #> Error: object 'SINBA.par' not found genes_SINBA<-lck_fyn[[1]]$target #> Error: object 'lck_fyn' not found genes_seed<-SINBA.par$sinba.network$target_list$LCK$target #> Error: object 'SINBA.par' not found genes_partner<-SINBA.par$sinba.network$target_list$FYN$target #> Error: object 'SINBA.par' not found dir_SINBA<-sign(lck_fyn[[1]]$spearman) #> Error: object 'lck_fyn' not found dir_seed<-sign(SINBA.par$sinba.network$target_list$LCK$spearman) #> Error: object 'SINBA.par' not found dir_partner<-sign(SINBA.par$sinba.network$target_list$FYN$spearman) #> Error: object 'SINBA.par' not found rank_profile <- SINBA.par$DE[[comp_name]]$`Z-statistics` #> Error: object 'SINBA.par' not found names(rank_profile)<-SINBA.par$DE[[comp_name]]$ID #> Error: object 'SINBA.par' not found rank_profile<-rank_profile[order(-rank_profile)] #> Error: object 'rank_profile' not found draw.GSEA_SINBA(rank_profile=rank_profile,use_genes_SINBA=genes_SINBA,use_genes_seed=genes_seed,use_genes_partner=genes_partner,use_direction=TRUE, use_direction_SINBA=dir_SINBA,use_direction_seed=dir_seed,use_direction_partner=dir_partner,main=\"LCK_FYN\",pdf_file=sprintf(\"%s/GSEA_LCK_FYN.pdf\",plot.dir),annotation=NULL,annotation_cex=1.2,left_annotation=\"Sensitive\",right_annotation=\"Resistant\") #> Error: object 'plot.dir' not found  if (FALSE) { # \\dontrun{ } # }"},{"path":"https://jingl87.github.io/SINBA/reference/draw.NetBID_SINBA.html","id":null,"dir":"Reference","previous_headings":"","what":"draw.NetBID_SINBA — draw.NetBID_SINBA","title":"draw.NetBID_SINBA — draw.NetBID_SINBA","text":"GSEA (gene set enrichment analysis) plot Synergy Inference data-driven Network-based Bayesian Analysis (SINBA) analysis results. draw.GSEA.NetBID.SINBA generate GSEA plot Synergy Inference data-driven Network-based Bayesian Analysis (SINBA) analysis results. SINBA calculates synergistic effect seed driver partner driver. plot includes GSEA plot seed driver partner driver independently GSEA plot combination seed driver partner driver. statistics plot include differentiated expression (DE), differentiated activity (DA) driver, different Z (deltaZ) showing difference combination seed partner driver sum original Z statistics. plot function draw GSEA synergistic effect prediction seed driver list partner drivers. User need input differentiated expression information, choose display target genes one row two rows, selecting black color red blue color bar.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/draw.NetBID_SINBA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"draw.NetBID_SINBA — draw.NetBID_SINBA","text":"","code":"draw.NetBID_SINBA(   DE = NULL,   name_col = NULL,   profile_col = NULL,   profile_trend = \"pos2neg\",   seed_driver = NULL,   partner_driver_list = NULL,   seed_driver_label = NULL,   partner_driver_label = NULL,   driver_DA_Z = NULL,   driver_DE_Z = NULL,   target_list = NULL,   target_list_merge = NULL,   DA_Z_merge = NULL,   diff_Z = NULL,   top_driver_number = 10,   top_order = \"merge\",   target_nrow = 2,   target_col = \"RdBu\",   target_col_type = \"PN\",   left_annotation = \"\",   right_annotation = \"\",   main = \"\",   profile_sig_thre = 0,   Z_sig_thre = 1.64,   pdf_file = NULL )"},{"path":"https://jingl87.github.io/SINBA/reference/draw.NetBID_SINBA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"draw.NetBID_SINBA — draw.NetBID_SINBA","text":"DE data.frame,differentiated expression results. data.frame generated using getDE.limma.2G getDE.BID.2G. user want generate data.frame strategies, rownames must gene names need one column gene name (set name_col) must contain columns indicating differentiated expression profile. name_col character, name column DE, contains gene name. NULL, use rownames DE. Default NULL. profile_col character, name column DE, used differentiated expression profile. DE created getDE.limma.2G getDE.BID.2G, parameter 'logFC' 't'. profile_trend character, choice display profile, high/positive low/negative ('pos2neg') low/negative high/positive ('neg2pos').Default 'pos2neg'. seed_driver character, name seed driver. partner_driver_list vector characters, name partner driver list. seed_driver_label character, label seed driver displayed plot. Default seed_driver. partner_driver_label vector characters, label partner driver list displayed plot. Default partner_driver_list driver_DA_Z vector numeric values, Z statistics differentiated activity (DA) driver list. Better give name vector, otherwise automatically use driver list (seed + partner) name. driver_DE_Z vector numeric values, Z statistics differentiated expression (DE) driver list. Better give name vector, otherwise automatically use driver list (seed + partner) name. target_list list target gene information drivers. names list must contain driver driver list (seed + partner) object list must data.frame contain one column (\"target\") save target genes. Strongly suggest follow NetBID2 pipeline, target_list automatically generated get_net2target_list running get.SJAracne.network. target_list_merge list target gene information thecombination seed driver partner drivers saperately. names list must contain driver partner_driver_list object list must data.frame contain one column (\"target\") save target genes. Strongly suggest follow NetBID2 pipeline, target_list_merge automatically generated merge_target_list. DA_Z_merge vector numeric values, Z statistics differentiated activity (DA) combination seed driver partner drivers saperately. Better give name vector, otherwise automatically use partner driver list name. top_driver_number numeric, number top significant partner drivers displayed plot. Default 10. top_order character, choice order pattern used display partner drivers. Two options,'merge' 'diff'. 'merge' means partner drivers sorted combined Z statistics. 'diff' means partner drivers sorted delta Z statistics. Default 'merge'. target_nrow numeric, number rows driver display plot. Two options, 1 2. set 1, target genes' position profile displayed one row. set 2, target genes' position profile displayed two rows, positive regulated genes displayed first row negative regulated genes displayed second row. Default 2. target_col character, choice color pattern used display targets. Two options,'black' 'RdBu'. set 'black', lines colored black. set 'RdBu', lines colored Red Blue color bar. target_col_type set 'PN', positive regulated genes colored red negative regulated genes blue. target_col_type set 'DE', color target genes set according value differentiated expression profile, significant high set red low blue. significant threshold set profile_sig_thre. Default 'RdBu'. target_col_type character, choice pattern used display color target genes, work target_col set 'RdBu'. Two options,'PN' 'DE'. set 'PN', positive regulated genes colored red negative regulated genes blue. set 'DE', color target genes set according value differentiated expression profile, Default 'PN'. left_annotation character, annotation displayed left figure representing left condition rank_profile. Default \"\". right_annotation character, annotation displayed right figure representing right condition rank_profile. Default \"\". main character, title plot. Default \"\". profile_sig_thre numeric, threshold absolute values profile treated significance. Target genes without signifcant values profile colored grey. work target_col_type set \"DE\" target_col set \"RdBu\". Default 0. Z_sig_thre numeric, threshold Z statistics driver_DA_Z driver_DE_Z treated signifcance. signifcant values background color. Default 1.64. pdf_file character, file path pdf file save figure pdf format.NULL, generate pdf file. Default NULL.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/draw.NetBID_SINBA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"draw.NetBID_SINBA — draw.NetBID_SINBA","text":"logical value indicating whether plot successfully generated","code":""},{"path":[]},{"path":"https://jingl87.github.io/SINBA/reference/draw.ROC_SINBA.html","id":null,"dir":"Reference","previous_headings":"","what":"draw.ROC_SINBA — draw.ROC_SINBA","title":"draw.ROC_SINBA — draw.ROC_SINBA","text":"draw.ROC_SINBA draws ROC curves, including seed partner drive curves combination driver curve.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/draw.ROC_SINBA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"draw.ROC_SINBA — draw.ROC_SINBA","text":"","code":"draw.ROC_SINBA(   ac_mat_sinba = NULL,   ac_mat_single = NULL,   SINBA_originalID = NULL,   phenotype_info = NULL,   group_col = NULL,   G1_name = NULL,   G0_name = NULL,   main = \"\",   pdf_file = NULL )"},{"path":"https://jingl87.github.io/SINBA/reference/draw.ROC_SINBA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"draw.ROC_SINBA — draw.ROC_SINBA","text":"ac_mat_sinba, numeric matrix, activity values selected seed-partner driver across samples. ac_mat_single, numeric matrix, activity values single driver across samples SINBA_originalID, seed parterne driver combination, generated combineNet2target_list return_type=\"SINBA_originalID\" phenotype_info, data frame sample group information group_col, character, column name used group G1_name, vector characters, sample names experimental group. G0_name, vector characters, sample names NON-experimental group. main, character, main title plot pdf_file, character, file path save PDF file. NULL, PDF file save. Default NULL.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/draw.ROC_SINBA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"draw.ROC_SINBA — draw.ROC_SINBA","text":"","code":"ac_mat_sinba<-exprs(SINBA.par$SINBA.ac.eset) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'object' in selecting a method for function 'exprs': object 'SINBA.par' not found ac_mat_single<-exprs(SINBA.par$SINBA_single.ac.eset) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'object' in selecting a method for function 'exprs': object 'SINBA.par' not found SINBA_originalID<-\"LCK:NOTCH1\" phenotype_info<-pData(SINBA.par$SINBA.ac.eset) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'object' in selecting a method for function 'pData': object 'SINBA.par' not found phenotype_info$condition<-ifelse(phenotype_info$das_lc50>80,\"Resistant\",\"Sensitive\") #> Error: object 'phenotype_info' not found draw.ROC_SINBA(ac_mat_sinba=ac_mat_sinba,ac_mat_single=ac_mat_single,SINBA_originalID=SINBA_originalID,phenotype_info=phenotype_info,group_col=\"condition\",G1_name=\"Sensitive\",G0_name=\"Resistant\",pdf_file=sprintf(\"./ROC_%s.pdf\",SINBA_originalID)) #> Error: object 'ac_mat_sinba' not found"},{"path":"https://jingl87.github.io/SINBA/reference/draw.box_SINBA.html","id":null,"dir":"Reference","previous_headings":"","what":"draw.box_SINBA — draw.box_SINBA","title":"draw.box_SINBA — draw.box_SINBA","text":"draw.box_SINBA draws scatter box plot visualize one selected seed partner driver single combined activity values across different phenotype subgroups samples. Three side--side scatter box plots created. left plot shows combined driver paire activity values different phenotype subgroups, point sample. middle right plot shows seed partner driver activity values different phenotype subgroups, point sample.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/draw.box_SINBA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"draw.box_SINBA — draw.box_SINBA","text":"","code":"draw.box_SINBA(   ac_mat_sinba = NULL,   ac_mat_single = NULL,   SINBA_originalID = NULL,   phenotype_info = NULL,   group_col = NULL,   group_levels = NULL,   group_colors = NULL,   main = \"\" )"},{"path":"https://jingl87.github.io/SINBA/reference/draw.box_SINBA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"draw.box_SINBA — draw.box_SINBA","text":"ac_mat_sinba, numeric matrix, activity values selected seed-partner driver across samples. ac_mat_single, numeric matrix, activity values single driver across samples SINBA_originalID, seed parterne driver combination, generated combineNet2target_list return_type=\"SINBA_originalID\" phenotype_info, data frame sample group information group_col, character, column name used group group_levels, vector characters, order group group_colors, vector characters, colors used group main, character, main title plot","code":""},{"path":"https://jingl87.github.io/SINBA/reference/draw.box_SINBA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"draw.box_SINBA — draw.box_SINBA","text":"","code":"ac_mat_sinba<-exprs(SINBA.par$SINBA.ac.eset) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'object' in selecting a method for function 'exprs': object 'SINBA.par' not found ac_mat_single<-exprs(SINBA.par$SINBA_single.ac.eset) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'object' in selecting a method for function 'exprs': object 'SINBA.par' not found SINBA_originalID<-\"LCK:STAT3\" phenotype_info<-pData(SINBA.par$SINBA.ac.eset) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'object' in selecting a method for function 'pData': object 'SINBA.par' not found phenotype_info$condition<-ifelse(phenotype_info$das_lc50>80,\"Resistant\",\"Sensitive\") #> Error: object 'phenotype_info' not found g<-draw.box_SINBA(ac_mat_sinba=ac_mat_sinba,ac_mat_single=ac_mat_single,SINBA_originalID=SINBA_originalID,phenotype_info=phenotype_info,group_col=\"condition\",group_levels=c(\"Sensitive\",\"Resistant\"),group_colors=c(\"red\",\"blue\")) #> Error: object 'ac_mat_sinba' not found"},{"path":"https://jingl87.github.io/SINBA/reference/drugdatabase_names.html","id":null,"dir":"Reference","previous_headings":"","what":"drugdatabase_names — drugdatabase_names","title":"drugdatabase_names — drugdatabase_names","text":"curated drug databases. Users can select sepecific drug database","code":""},{"path":"https://jingl87.github.io/SINBA/reference/drugdatabase_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"drugdatabase_names — drugdatabase_names","text":"","code":"drugdatabase_names()"},{"path":"https://jingl87.github.io/SINBA/reference/drugdatabase_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"drugdatabase_names — drugdatabase_names","text":"","code":"drugdatabase_names() #> [1] \"BPdb\"            \"ChEMBL\"          \"cMAP\"            \"Drugbank_V5.1\"   #> [5] \"rDGIdb_1.8.0\"    \"Repurposing_HUB\""},{"path":"https://jingl87.github.io/SINBA/reference/drugdb.preload.html","id":null,"dir":"Reference","previous_headings":"","what":"Preload drug database files into R workspace for SINBA — drugdb.preload","title":"Preload drug database files into R workspace for SINBA — drugdb.preload","text":"drugdb.preload pre-processing function SINBA. preloads needed drug databases R workspace,saves locally data/ directory.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/drugdb.preload.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preload drug database files into R workspace for SINBA — drugdb.preload","text":"","code":"drugdb.preload(db = NULL, main.dir = NULL, out.dir = NULL)"},{"path":"https://jingl87.github.io/SINBA/reference/drugdb.preload.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preload drug database files into R workspace for SINBA — drugdb.preload","text":"db vector characters, users can choose \"BPdb\",\"ChEMBL\",\"cMAP\",\"Drugbank_V5.1\", \"rDGIdb_1.8.0\" \"Repurposing_HUB\". NULL, drug databases used. Default NULL. main.dir character, main directory SINBA package. NULL, system.file(package = \"SINBA\"). Default NULL. .dir charater, directory save drug database information. NULL, system.file(package = \"SINBA\"). Default NULL.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/drugdb.preload.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Preload drug database files into R workspace for SINBA — drugdb.preload","text":"Users need choose drug databse sources(e.g. \"BPdb\",\"ChEMBL\",\"cMAP\",\"Drugbank_V5.1\", \"rDGIdb_1.8.0\",\"Repurposing_HUB\")","code":""},{"path":"https://jingl87.github.io/SINBA/reference/drugdb.preload.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preload drug database files into R workspace for SINBA — drugdb.preload","text":"","code":"drugdb.preload() #> db not set, will use all the available databases: BPdb,ChEMBL,cMAP,Drugbank_V5.1,rDGIdb_1.8.0,Repurposing_HUB! #> main.dir not set, will use package directory: /private/var/folders/ks/by4rh1y10ssbd07q9z4ycwq40000gp/T/RtmpioPFV1/temp_libpath2365270c4416/SINBA/data #> out.dir not set, will use package directory: /private/var/folders/ks/by4rh1y10ssbd07q9z4ycwq40000gp/T/RtmpioPFV1/temp_libpath2365270c4416/SINBA/data #> Warning: cannot open compressed file '/private/var/folders/ks/by4rh1y10ssbd07q9z4ycwq40000gp/T/RtmpioPFV1/temp_libpath2365270c4416/SINBA/data/Drugdb_SINBA.rda', probable reason 'No such file or directory' #> Error in readChar(con, 5L, useBytes = TRUE): cannot open the connection  if (FALSE) { # \\dontrun{ drugdb.preload() } # }"},{"path":"https://jingl87.github.io/SINBA/reference/find_max_sum_submatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"find_max_sum_submatrix — find_max_sum_submatrix","title":"find_max_sum_submatrix — find_max_sum_submatrix","text":"Main function find maximum sum deltaZ score submatrix using GA optimize screening layout seed partner drivers.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/find_max_sum_submatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"find_max_sum_submatrix — find_max_sum_submatrix","text":"","code":"find_max_sum_submatrix(   matrix,   n,   m,   use_popSize = 50,   use_maxiter = 100,   use_run = 50,   use_suggestions = NULL )"},{"path":"https://jingl87.github.io/SINBA/reference/find_max_sum_submatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"find_max_sum_submatrix — find_max_sum_submatrix","text":"matrix deltaZ score matrix seed driver layout optimization. created run convert_deltaZ2_matrix. n row numbers. m colum number use_popSize Population size, GA::ga function parameter,default=50. use_maxiter Maximum iterations, GA::ga function parameter, default=100. use_run Early stopping criterion,GA::ga function parameter, default=50. use_suggestions Optional: initial solutions, GA::ga function parameter,default=NULL.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/find_max_sum_submatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"find_max_sum_submatrix — find_max_sum_submatrix","text":"","code":"generate_matrix2<-function(n, m) {     out_mat<-matrix(sample(1:10, 10 * n * 10 * m, replace = TRUE), nrow = 10 * n, ncol = 10 * m)     rownames(out_mat)<-paste0(\"R_\",1:dim(out_mat)[1])     colnames(out_mat)<-paste0(\"C_\",1:dim(out_mat)[2])     return(out_mat) } base_matrix<-generate_matrix2(n=5,m=10) out<-find_max_sum_submatrix(matrix=base_matrix, n=4, m=3) #> Error: index error opt_mat<-out$submatrix #> Error: object 'out' not found if (FALSE) { # \\dontrun{ } # }"},{"path":"https://jingl87.github.io/SINBA/reference/fitness_function.html","id":null,"dir":"Reference","previous_headings":"","what":"fitness_function — fitness_function","title":"fitness_function — fitness_function","text":"Fitness function calculate SUM selected submatrix","code":""},{"path":"https://jingl87.github.io/SINBA/reference/fitness_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fitness_function — fitness_function","text":"","code":"fitness_function(solution, matrix, n, m)"},{"path":"https://jingl87.github.io/SINBA/reference/fitness_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fitness_function — fitness_function","text":"solution vector n+m numbers. matrix original matrix optimize. n row numbers. m column numbers.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/geneCategories.html","id":null,"dir":"Reference","previous_headings":"","what":"geneCategories — geneCategories","title":"geneCategories — geneCategories","text":"available geneCategories used DGIdb. Users can select specific geneCategories","code":""},{"path":"https://jingl87.github.io/SINBA/reference/geneCategories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"geneCategories — geneCategories","text":"","code":"geneCategories()"},{"path":"https://jingl87.github.io/SINBA/reference/geneCategories.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"geneCategories — geneCategories","text":"","code":"geneCategories() #>  [1] \"ABC TRANSPORTER\"                          #>  [2] \"B30_2 SPRY DOMAIN\"                        #>  [3] \"CELL SURFACE\"                             #>  [4] \"CLINICALLY ACTIONABLE\"                    #>  [5] \"CYTOCHROME P450\"                          #>  [6] \"DNA DIRECTED RNA POLYMERASE\"              #>  [7] \"DNA REPAIR\"                               #>  [8] \"DRUG METABOLISM\"                          #>  [9] \"DRUG RESISTANCE\"                          #> [10] \"DRUGGABLE GENOME\"                         #> [11] \"ENZYME\"                                   #> [12] \"EXCHANGER\"                                #> [13] \"EXTERNAL SIDE OF PLASMA MEMBRANE\"         #> [14] \"FIBRINOGEN\"                               #> [15] \"G PROTEIN COUPLED RECEPTOR\"               #> [16] \"GROWTH FACTOR\"                            #> [17] \"HISTONE MODIFICATION\"                     #> [18] \"HORMONE ACTIVITY\"                         #> [19] \"ION CHANNEL\"                              #> [20] \"KINASE\"                                   #> [21] \"LIPASE\"                                   #> [22] \"LIPID KINASE\"                             #> [23] \"METHYL TRANSFERASE\"                       #> [24] \"MYOTUBULARIN RELATED PROTEIN PHOSPHATASE\" #> [25] \"NEUTRAL ZINC METALLOPEPTIDASE\"            #> [26] \"NUCLEAR HORMONE RECEPTOR\"                 #> [27] \"PHOSPHATIDYLINOSITOL 3 KINASE\"            #> [28] \"PHOSPHOLIPASE\"                            #> [29] \"PROTEASE\"                                 #> [30] \"PROTEASE INHIBITOR\"                       #> [31] \"PROTEIN PHOSPHATASE\"                      #> [32] \"PTEN FAMILY\"                              #> [33] \"RNA DIRECTED DNA POLYMERASE\"              #> [34] \"SERINE THREONINE KINASE\"                  #> [35] \"SHORT CHAIN DEHYDROGENASE REDUCTASE\"      #> [36] \"THIOREDOXIN\"                              #> [37] \"TRANSCRIPTION FACTOR\"                     #> [38] \"TRANSCRIPTION FACTOR BINDING\"             #> [39] \"TRANSCRIPTION FACTOR COMPLEX\"             #> [40] \"TRANSPORTER\"                              #> [41] \"TUMOR SUPPRESSOR\"                         #> [42] \"TYROSINE KINASE\"                          #> [43] \"UNKNOWN\""},{"path":"https://jingl87.github.io/SINBA/reference/generate.AUCTable.html","id":null,"dir":"Reference","previous_headings":"","what":"generate.AUCTable — generate.AUCTable","title":"generate.AUCTable — generate.AUCTable","text":"master table gathers results ROCTestfrom multiple comparisons.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/generate.AUCTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generate.AUCTable — generate.AUCTable","text":"","code":"generate.AUCTable(pair.AUC, single.AUC, use_comp)"},{"path":"https://jingl87.github.io/SINBA/reference/generate.AUCTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generate.AUCTable — generate.AUCTable","text":"pair.AUC list results ROCTest seed-partner combined activities. single.AUC list results ROCTest singe driver activities. use_comp vector characters, name multiple comparisons. used name columns AUC table.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/generate.AUCTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"generate.AUCTable — generate.AUCTable","text":"","code":"pair.AUC<-list() single.AUC<-list() for(i in 1:dim(comps)[1]){  comp_name <- sprintf('%s.Vs.%s',comps[i,1],comps[i,2]) ## each comparison must give a name !!!  G0  <- rownames(phe_info)[which(phe_info$group==comps[i,2])] # get sample list for G0  G1  <- rownames(phe_info)[which(phe_info$group==comps[i,1])] # get sample list for G1  pair.AUC[[comp_name]]<-ROCTest(eset=SINBA.par$SINBA_AC.eset,G0=G0,G1=G1)  single.AUC[[comp_name]]<-ROCTest(eset=SINBA.par$single_AC.eset,G0=G0,G1=G1)} #> Error: object 'comps' not found  use_comp<-names(pair.AUC) auc_tab<-generate.AUCTable(pair.AUC = pair.AUC,single.AUC = single.AUC,use_comp = use_comp) #> Error in pair.AUC[[1]]: subscript out of bounds if (FALSE) { # \\dontrun{ } # }"},{"path":"https://jingl87.github.io/SINBA/reference/generate.SINBA.eset.html","id":null,"dir":"Reference","previous_headings":"","what":"generate.SINBA.eset — generate.SINBA.eset","title":"generate.SINBA.eset — generate.SINBA.eset","text":"generate.eset generates ExpressionSet class object contain describe high-throughput assays. Users need define slots, expression matrix (required), phenotype information feature information (optional). useful expression matrix available.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/generate.SINBA.eset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generate.SINBA.eset — generate.SINBA.eset","text":"","code":"generate.SINBA.eset(   exp_mat = NULL,   phenotype_info = NULL,   feature_info = NULL,   annotation_info = \"\" )"},{"path":"https://jingl87.github.io/SINBA/reference/generate.SINBA.eset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generate.SINBA.eset — generate.SINBA.eset","text":"exp_mat matrix, expression data matrix. row represents gene/transcript/probe, column represents sample. phenotype_info data.frame, phenotype information samples exp_mat. phenotype data frame, row represents sample, column represents phenotype feature. row names must match column names exp_mat. NULL, generate single-column data frame. Default NULL. feature_info data.frame, feature information genes/transcripts/probes exp_mat. feature data frame, row represents gene/transcript/probe column represents annotation feature. row names must match row names exp_mat. NULL, generate single-column data frame. Default NULL. annotation_info character, annotation set users easier reference. Default \"\".","code":""},{"path":"https://jingl87.github.io/SINBA/reference/generate.SINBA.eset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generate.SINBA.eset — generate.SINBA.eset","text":"Return ExressionSet object.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/generate.SINBA.eset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"generate.SINBA.eset — generate.SINBA.eset","text":"","code":"mat1 <- matrix(rnorm(10000),nrow=1000,ncol=10) colnames(mat1) <- paste0('Sample',1:ncol(mat1)) rownames(mat1) <- paste0('Gene',1:nrow(mat1)) eset <- generate.eset(exp_mat=mat1) #> Error in generate.eset(exp_mat = mat1): could not find function \"generate.eset\"  if (FALSE) { # \\dontrun{ } # }"},{"path":"https://jingl87.github.io/SINBA/reference/generate.masterTable.SINBA.html","id":null,"dir":"Reference","previous_headings":"","what":"generate.masterTable.SINBA — generate.masterTable.SINBA","title":"generate.masterTable.SINBA — generate.masterTable.SINBA","text":"master table gathers DE (differential expression analysis), DA (differential activity analysis single driver) DA.SINBA (differential activity analysis driver pairs) multiple comparisons.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/generate.masterTable.SINBA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generate.masterTable.SINBA — generate.masterTable.SINBA","text":"","code":"generate.masterTable.SINBA(   use_comp = NULL,   DA.SINBA = NULL,   DA = NULL,   DE = NULL,   ftest = NULL,   z_col = \"Z-statistics\",   display_col = c(\"logFC\", \"P.Value\"),   deltaZ_method = \"max\" )"},{"path":"https://jingl87.github.io/SINBA/reference/generate.masterTable.SINBA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generate.masterTable.SINBA — generate.masterTable.SINBA","text":"use_comp vector characters, name multiple comparisons. used name columns master table. DA.SINBA list, list DA comparisons driver pairs activity, comparison data.frame. element name list must contain name use_comp. DA list, list DA comparisons single driver activity, comparison data.frame. element name list must contain name use_comp. DE list, list DE comparisons, comparison data.frame. element name list must contain name use_comp. ftest data.frame, output seed2partners_ftest, summarized fisher exact test resutls seed partern drivers. z_col character, name column DE DA contains Z statistics. Default \"Z-statistics\". display_col character, name column DE DA need kept master table (e.g.\"P.Value\",\"adj.P.Val\" \"logFC\"). Default c(\"logFC\",\"P.Value\"). deltaZ_method character, name method used calculate deltaZ value. Users can choose \"max\" \"mean\". Default value \"max\".","code":""},{"path":"https://jingl87.github.io/SINBA/reference/generate.masterTable.SINBA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"generate.masterTable.SINBA — generate.masterTable.SINBA","text":"","code":"use_comp<-names(SINBA.par$DA) #> Error: object 'SINBA.par' not found out<-generate.masterTable.SINBA(use_comp=use_comp,DA.SINBA=SINBA.par$SINBA.DA,DA=SINBA.par$DA,DE=SINBA.par$DE,ftest=SINBA.par$SINBA.ftest,z_col='Z-statistics',display_col=c('logFC','P.Value'),deltaZ_method=\"max\") #> Error: object 'use_comp' not found if (FALSE) { # \\dontrun{ } # }"},{"path":"https://jingl87.github.io/SINBA/reference/get.SINBA.DE.2G.html","id":null,"dir":"Reference","previous_headings":"","what":"get.SINBA.DE.2G — get.SINBA.DE.2G","title":"get.SINBA.DE.2G — get.SINBA.DE.2G","text":"Differential Expression Analysis Differential Activity Analysis 2 Sample Groups. get.SINBA.DE.2G function performs differential gene expression analysis differential driver activity analysis control group (parameter G0) experimental group (parameter G1), using different methods.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/get.SINBA.DE.2G.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get.SINBA.DE.2G — get.SINBA.DE.2G","text":"","code":"get.SINBA.DE.2G(   eset = NULL,   G1 = NULL,   G0 = NULL,   G1_name = NULL,   G0_name = NULL,   verbose = TRUE,   do.log2 = F,   test.use = \"limma\",   random_effect = NULL )"},{"path":"https://jingl87.github.io/SINBA/reference/get.SINBA.DE.2G.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get.SINBA.DE.2G — get.SINBA.DE.2G","text":"eset ExpressionSet class object, contains gene expression data driver activity data. G1 vector characters, sample names experimental group. G0 vecotr characters, sample names control group. G1_name character, name experimental group (e.g. \"Male\"). Default \"G1\". G0_name character, name control group (e.g. \"Female\"). Default \"G0\". verbose logical, TRUE, sample names groups printed. Default TRUE. test.use character, users can choose one methods c(\"limma\",\"t.test\",\"wilcox\"). Default \"limma\" random_effect vector characters, vector factor specifying blocking variable.Default NULL, random effect considered.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/get.SINBA.DE.2G.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get.SINBA.DE.2G — get.SINBA.DE.2G","text":"Return data frame. Rows genes/drivers, columns \"ID\",\"Z-statistics\",\"P.Value\",\"adj.P.Val\",\"logFC\"","code":""},{"path":"https://jingl87.github.io/SINBA/reference/get.SINBA.DE.2G.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get.SINBA.DE.2G — get.SINBA.DE.2G","text":"","code":"phe_info <- Biobase::pData(SINBA.par$cal.eset) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'object' in selecting a method for function 'pData': object 'SINBA.par' not found phe_info$subgroup<-phe_info$das_sensitivity_category1 #> Error: object 'phe_info' not found G0  <- rownames(phe_info)[which(phe_info$`subgroup`==\"resistant\")] # get sample list for G0 #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'rownames': object 'phe_info' not found G1  <- rownames(phe_info)[which(phe_info$`subgroup`==\"sensitive\")] # get sample list for G1 #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'rownames': object 'phe_info' not found ac_eset<-generate.SINBA.eset(exp_mat=ac_mat, phenotype_info=phe_info, feature_info=NULL, annotation_info=\"\") #> Error: object 'ac_mat' not found DE_gene_limma <- get.SINBA.DE.2G(eset=SINBA.par$cal.eset,G1=G1,G0=G0,G1_name=\"sensitive\",G0_name='resistant',test.use=\"limma\") #> Error: object 'SINBA.par' not found DA_gene_limma <- get.SINBA.DE.2G(eset=ac_eset,G1=G1,G0=G0,G1_name=\"sensitive\",G0_name='resistant',test.use=\"limma\") #> Error: object 'ac_eset' not found if (FALSE) { # \\dontrun{ } # }"},{"path":"https://jingl87.github.io/SINBA/reference/get.combined.network.html","id":null,"dir":"Reference","previous_headings":"","what":"get.combined.network — get.combined.network","title":"get.combined.network — get.combined.network","text":"function merge two networks one network prepared SINBA activity calculation.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/get.combined.network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get.combined.network — get.combined.network","text":"","code":"get.combined.network(network1 = NULL, network2 = NULL)"},{"path":"https://jingl87.github.io/SINBA/reference/get.combined.network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get.combined.network — get.combined.network","text":"network1 network object, generated get.single.network contaning network_data. network_dat data.frame, contains information network SJARACNe constructed.network_dat data.frame, contains information network SJARACNe constructed must contain four columns column names \"source\" (driver) \"target\" (target genes), \"MI\" (mutual information) \"spearman\" (spearman correlation coefficient). network2 network object, generated get.single.network contaning network_data. network_dat data.frame, contains information network SJARACNe constructed must contain four columns column names \"source\" (driver) \"target\" (target genes), \"MI\" (mutual information) \"spearman\" (spearman correlation coefficient).","code":""},{"path":"https://jingl87.github.io/SINBA/reference/get.combined.network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get.combined.network — get.combined.network","text":"","code":"out_net_file1<-\"path1_to_network_file/consensus_network_ncol_.txt\" out_net_file2<-\"path2_to_network_file/consensus_network_ncol_.txt\" net1  <- get.single.network(network_file=out_net_file1) #> Warning: cannot open file 'path1_to_network_file/consensus_network_ncol_.txt': No such file or directory #> Error in file(file, \"rt\"): cannot open the connection net2  <- get.single.network(network_file=out_net_file2) #> Warning: cannot open file 'path2_to_network_file/consensus_network_ncol_.txt': No such file or directory #> Error in file(file, \"rt\"): cannot open the connection combined.network<-get.combined.network(network1=net1,network2=net2) #> Error: object 'net1' not found if (FALSE) { # \\dontrun{ } # }"},{"path":"https://jingl87.github.io/SINBA/reference/get.single.network.html","id":null,"dir":"Reference","previous_headings":"","what":"get.single.network — get.single.network","title":"get.single.network — get.single.network","text":"Read SJARACNe Network Result Return List Object get.single.network reads SJARACNe network construction result returns list object including 1.network data frame, 2.driver--target list 3.igraph object wrapped inside. demo, \"consensus_network_ncol_.txt\" file read convert list object. list contains three elements, network_data, target_list igraph_obj. network_dat data.frame, contains information network SJARACNe constructed. target_list driver--target list object. Please check details get_net2target_list. igraph_obj igraph object used save directed weighted network. edge network two attributes, weight sign. weight \"MI (mutual information)\" value sign sign spearman correlation coefficient (1, positive regulation; -1, negative regulation).","code":""},{"path":"https://jingl87.github.io/SINBA/reference/get.single.network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get.single.network — get.single.network","text":"","code":"get.single.network(network_file = NULL)"},{"path":"https://jingl87.github.io/SINBA/reference/get.single.network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get.single.network — get.single.network","text":"network_file character, path storing network file. output SJAracne, name network file \"consensus_network_ncol_.txt\" output directory.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/get.single.network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get.single.network — get.single.network","text":"Return list containing three elements, network_dat, target_list igraph_obj.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/get.single.network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get.single.network — get.single.network","text":"","code":"out_net_file<-\"path_to_network_file/consensus_network_ncol_.txt\" network  <- get.single.network(network_file=out_net_file) #> Warning: cannot open file 'path_to_network_file/consensus_network_ncol_.txt': No such file or directory #> Error in file(file, \"rt\"): cannot open the connection  if (FALSE) { # \\dontrun{ } # }"},{"path":"https://jingl87.github.io/SINBA/reference/getResultSummary_drug_V5.html","id":null,"dir":"Reference","previous_headings":"","what":"getResultSummary_drug_V5 — getResultSummary_drug_V5","title":"getResultSummary_drug_V5 — getResultSummary_drug_V5","text":"organized result queryDgidb_V5_drug","code":""},{"path":"https://jingl87.github.io/SINBA/reference/getResultSummary_drug_V5.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getResultSummary_drug_V5 — getResultSummary_drug_V5","text":"","code":"getResultSummary_drug_V5(drug, output)"},{"path":"https://jingl87.github.io/SINBA/reference/getResultSummary_drug_V5.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getResultSummary_drug_V5 — getResultSummary_drug_V5","text":"drug used drug name output output query res$data$drugs$nodes$interactions","code":""},{"path":"https://jingl87.github.io/SINBA/reference/getResultSummary_gene_V5.html","id":null,"dir":"Reference","previous_headings":"","what":"getResultSummary_gene_V5 — getResultSummary_gene_V5","title":"getResultSummary_gene_V5 — getResultSummary_gene_V5","text":"organized result queryDgidb_V5_gene","code":""},{"path":"https://jingl87.github.io/SINBA/reference/getResultSummary_gene_V5.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getResultSummary_gene_V5 — getResultSummary_gene_V5","text":"","code":"getResultSummary_gene_V5(gene, output)"},{"path":"https://jingl87.github.io/SINBA/reference/interactionTypes.html","id":null,"dir":"Reference","previous_headings":"","what":"interactionTypes — interactionTypes","title":"interactionTypes — interactionTypes","text":"available interactionTypes used DGIdb. Users can select specific interactionTypes","code":""},{"path":"https://jingl87.github.io/SINBA/reference/interactionTypes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"interactionTypes — interactionTypes","text":"","code":"interactionTypes()"},{"path":"https://jingl87.github.io/SINBA/reference/interactionTypes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"interactionTypes — interactionTypes","text":"","code":"interactionTypes() #>  [1] \"activator\"                       \"adduct\"                          #>  [3] \"agonist\"                         \"allosteric modulator\"            #>  [5] \"antagonist\"                      \"antibody\"                        #>  [7] \"antisense oligonucleotide\"       \"binder\"                          #>  [9] \"blocker\"                         \"chaperone\"                       #> [11] \"cleavage\"                        \"cofactor\"                        #> [13] \"inducer\"                         \"inhibitor\"                       #> [15] \"inhibitory allosteric modulator\" \"inverse agonist\"                 #> [17] \"ligand\"                          \"modulator\"                       #> [19] \"multitarget\"                     \"n/a\"                             #> [21] \"negative modulator\"              \"other/unknown\"                   #> [23] \"partial agonist\"                 \"partial antagonist\"              #> [25] \"positive modulator\"              \"potentiator\"                     #> [27] \"product of\"                      \"stimulator\"                      #> [29] \"substrate\"                       \"suppressor\"                      #> [31] \"vaccine\""},{"path":"https://jingl87.github.io/SINBA/reference/l2l_ftest.html","id":null,"dir":"Reference","previous_headings":"","what":"l2l_ftest — l2l_ftest","title":"l2l_ftest — l2l_ftest","text":"l2l_ftest","code":""},{"path":"https://jingl87.github.io/SINBA/reference/l2l_ftest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"l2l_ftest — l2l_ftest","text":"","code":"l2l_ftest(gsc1, gsc2, N)"},{"path":"https://jingl87.github.io/SINBA/reference/l2l_ftest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"l2l_ftest — l2l_ftest","text":"gsc1 list genesets, geneset contains multiple gene names. gsc2 list genesets, geneset contains multiple gene names. N mumeric, total unique gene number gsc1 gsc2.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/l2l_ftest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"l2l_ftest — l2l_ftest","text":"Return table fisher exact testing results.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/queryDGIdb.SINBA.html","id":null,"dir":"Reference","previous_headings":"","what":"queryDGIdb.SINBA — queryDGIdb.SINBA","title":"queryDGIdb.SINBA — queryDGIdb.SINBA","text":"wrapper query DGIdb API gene name. Deprecated Use queryDgidb_V5_gene() instead.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/queryDGIdb.SINBA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"queryDGIdb.SINBA — queryDGIdb.SINBA","text":"","code":"queryDGIdb.SINBA(   genes = NULL,   source_Databases = c(\"CGI\", \"CIViC\", \"COSMIC\", \"CancerCommons\", \"ChemblInteractions\",     \"ClearityFoundationBiomarkers\", \"ClearityFoundationClinicalTrial\", \"DTC\", \"DoCM\",     \"DrugBank\", \"FDA\", \"GuideToPharmacology\", \"JAX-CKB\", \"MyCancerGenome\",     \"MyCancerGenomeClinicalTrial\", \"NCI\", \"OncoKB\", \"PharmGKB\", \"TALC\", \"TEND\", \"TTD\",     \"TdgClinicalTrial\"),   gene_Categories = c(\"ABC TRANSPORTER\", \"B30_2 SPRY DOMAIN\", \"CELL SURFACE\",     \"CLINICALLY ACTIONABLE\", \"CYTOCHROME P450\", \"DNA DIRECTED RNA POLYMERASE\",     \"DNA REPAIR\", \"DRUG METABOLISM\", \"DRUG RESISTANCE\", \"DRUGGABLE GENOME\", \"ENZYME\",     \"EXCHANGER\", \"EXTERNAL SIDE OF PLASMA MEMBRANE\", \"FIBRINOGEN\",     \"G PROTEIN COUPLED RECEPTOR\", \"GROWTH FACTOR\", \"HISTONE MODIFICATION\",     \"HORMONE ACTIVITY\", \"ION CHANNEL\", \"KINASE\", \"LIPASE\", \"LIPID KINASE\",     \"METHYL TRANSFERASE\", \"MYOTUBULARIN RELATED PROTEIN PHOSPHATASE\",     \"NEUTRAL ZINC METALLOPEPTIDASE\",       \"NUCLEAR HORMONE RECEPTOR\",     \"PHOSPHATIDYLINOSITOL 3 KINASE\", \"PHOSPHOLIPASE\", \"PROTEASE\", \"PROTEASE INHIBITOR\",     \"PROTEIN PHOSPHATASE\", \"PTEN FAMILY\", \"RNA DIRECTED DNA POLYMERASE\",     \"SERINE THREONINE KINASE\", \"SHORT CHAIN DEHYDROGENASE REDUCTASE\", \"THIOREDOXIN\",     \"TRANSCRIPTION FACTOR\", \"TRANSCRIPTION FACTOR BINDING\",     \"TRANSCRIPTION FACTOR COMPLEX\", \"TRANSPORTER\", \"TUMOR SUPPRESSOR\", \"TYROSINE KINASE\",     \"UNKNOWN\"),   interaction_Types = c(\"activator\", \"adduct\", \"agonist\", \"allosteric modulator\",     \"antagonist\", \"antibody\", \"antisense oligonucleotide\", \"binder\", \"blocker\",     \"chaperone\", \"cleavage\", \"cofactor\", \"inducer\", \"inhibitor\",     \"inhibitory allosteric modulator\", \"inverse agonist\", \"ligand\", \"modulator\",     \"multitarget\", \"n/a\", \"negative modulator\", \"other/unknown\", \"partial agonist\",     \"partial antagonist\", \"positive modulator\", \"potentiator\", \"product of\",     \"stimulator\", \"substrate\", \"suppressor\", \"vaccine\"),   return_raw = F )"},{"path":"https://jingl87.github.io/SINBA/reference/queryDGIdb.SINBA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"queryDGIdb.SINBA — queryDGIdb.SINBA","text":"genes character vector genes drug interactions queried. source_Databases character vector source databses used. Users can call helper function sourceDatabases() find available database. query available databases, skip argument (highly recommend). gene_Categories character vector gene categories used. Users can call helper function geneCategories() find available categories. query available categories, skip argument. interaction_Types character vector gene drug interaction types used. Users can call helper function interactionTypes() find available interactionTypes. query available interaction types, skip argument. return_raw logical value, default FALSE, return summarized information. users want check raw query data, please change TRUE.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/queryDGIdb.SINBA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"queryDGIdb.SINBA — queryDGIdb.SINBA","text":"list contains 1.data frame(\"summary_result\") summarized gene,drug interaction information; 2.raw query data(\"raw_result\") DGIdb (optional).","code":""},{"path":"https://jingl87.github.io/SINBA/reference/queryDGIdb.SINBA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"queryDGIdb.SINBA — queryDGIdb.SINBA","text":"","code":"genes<-c(\"ATM\",\"BCL2L1\",\"LCK\",\"CDK4\") res<-queryDGIdb.SINBA(genes=genes,interaction_Types=c(\"inhibitor\",\"antagonist\")) #> Error in queryDGIdb.SINBA(genes = genes, interaction_Types = c(\"inhibitor\",     \"antagonist\")): could not find function \"queryDGIdb.SINBA\" res<-queryDGIdb.SINBA(genes=genes,source_Databases =c(\"ChemblInteractions\",\"TTD\",\"OncoKB\",\"MyCancerGenome\",\"DrugBank\",\"FDA\"),interaction_Types=c(\"inhibitor\",\"antagonist\")) #> Error in queryDGIdb.SINBA(genes = genes, source_Databases = c(\"ChemblInteractions\",     \"TTD\", \"OncoKB\", \"MyCancerGenome\", \"DrugBank\", \"FDA\"), interaction_Types = c(\"inhibitor\",     \"antagonist\")): could not find function \"queryDGIdb.SINBA\""},{"path":"https://jingl87.github.io/SINBA/reference/queryDGIdb_by_drug.html","id":null,"dir":"Reference","previous_headings":"","what":"queryDGIdb_by_drug — queryDGIdb_by_drug","title":"queryDGIdb_by_drug — queryDGIdb_by_drug","text":"wrapper query DGIdb API drug name. Deprecated Use queryDgidb_V5_drug() instead.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/queryDGIdb_by_drug.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"queryDGIdb_by_drug — queryDGIdb_by_drug","text":"","code":"queryDGIdb_by_drug(drugs = NULL, return_raw = F)"},{"path":"https://jingl87.github.io/SINBA/reference/queryDGIdb_by_drug.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"queryDGIdb_by_drug — queryDGIdb_by_drug","text":"drugs character vector drugs used find targeting genes. return_raw logical value, default FALSE, return summarized information. users want check raw query data, please change TRUE.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/queryDGIdb_by_drug.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"queryDGIdb_by_drug — queryDGIdb_by_drug","text":"list contains 1.data frame(\"summary_result\") summarized gene,drug interaction information; 2.raw query data(\"raw_result\") DGIdb (optional).","code":""},{"path":"https://jingl87.github.io/SINBA/reference/queryDGIdb_by_drug.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"queryDGIdb_by_drug — queryDGIdb_by_drug","text":"","code":"res<-queryDGIdb_by_drug(drugs=c(\"dasatinib\",\"venetoclax\")) #> Error in queryDGIdb_by_drug(drugs = c(\"dasatinib\", \"venetoclax\")): could not find function \"queryDGIdb_by_drug\""},{"path":"https://jingl87.github.io/SINBA/reference/queryDgidb_V5_drug.html","id":null,"dir":"Reference","previous_headings":"","what":"queryDgidb_V5_drug — queryDgidb_V5_drug","title":"queryDgidb_V5_drug — queryDgidb_V5_drug","text":"wrapper query DGIdb API drug name. Use ghql GraphqlClient function query DGIdb version 5 find interaction drug gene. Informations including: \"interactionScore\",\"interactionTypes\",\"interactionAttributes\",\"publications\", \"sources\",\"gene.name\",\"gene.conceptId\",\"gene.longName\" ,\"Drug\".","code":""},{"path":"https://jingl87.github.io/SINBA/reference/queryDgidb_V5_drug.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"queryDgidb_V5_drug — queryDgidb_V5_drug","text":"","code":"queryDgidb_V5_drug(drugs)"},{"path":"https://jingl87.github.io/SINBA/reference/queryDgidb_V5_drug.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"queryDgidb_V5_drug — queryDgidb_V5_drug","text":"drugs character vector, query drug names.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/queryDgidb_V5_drug.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"queryDgidb_V5_drug — queryDgidb_V5_drug","text":"","code":"use_drugs<-c(\"Dasatinib\",\"DOVITINIB\") res<-queryDgidb_V5_drug(drugs=use_drugs) #> Error in FUN(X[[i]], ...): object 'Query' not found"},{"path":"https://jingl87.github.io/SINBA/reference/queryDgidb_V5_drugAnnotation.html","id":null,"dir":"Reference","previous_headings":"","what":"queryDgidb_V5_drugAnnotation — queryDgidb_V5_drugAnnotation","title":"queryDgidb_V5_drugAnnotation — queryDgidb_V5_drugAnnotation","text":"Using ghql GraphqlClient function query DGIdb version 5 find drug meta information, including: \"name\",\"conceptId\",\"approved\" ,\"immunotherapy\", \"antiNeoplastic\",\"drugAttributes\" ,\"drugApprovalRatings\" ,\"drugApplications\".","code":""},{"path":"https://jingl87.github.io/SINBA/reference/queryDgidb_V5_drugAnnotation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"queryDgidb_V5_drugAnnotation — queryDgidb_V5_drugAnnotation","text":"","code":"queryDgidb_V5_drugAnnotation(drugs)"},{"path":"https://jingl87.github.io/SINBA/reference/queryDgidb_V5_drugAnnotation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"queryDgidb_V5_drugAnnotation — queryDgidb_V5_drugAnnotation","text":"drugs character vector, query drug names.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/queryDgidb_V5_drugAnnotation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"queryDgidb_V5_drugAnnotation — queryDgidb_V5_drugAnnotation","text":"","code":"use_drugs<-c(\"Dasatinib\",\"DOVITINIB\",\"nondrug\") res<-queryDgidb_V5_drugAnnotation(drugs=use_drugs) #> Error in FUN(X[[i]], ...): object 'Query' not found"},{"path":"https://jingl87.github.io/SINBA/reference/queryDgidb_V5_gene.html","id":null,"dir":"Reference","previous_headings":"","what":"queryDgidb_V5_gene — queryDgidb_V5_gene","title":"queryDgidb_V5_gene — queryDgidb_V5_gene","text":"wrapper query DGIdb API gene name. Use ghql GraphqlClient function query DGIdb version 5 find interaction drug gene, information including: \"interactionScore\",\"interactionTypes\",\"interactionAttributes\" ,\"publications\",\"sources\",\"drug.name\",\"drug.conceptId\",\"queryGene\"","code":""},{"path":"https://jingl87.github.io/SINBA/reference/queryDgidb_V5_gene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"queryDgidb_V5_gene — queryDgidb_V5_gene","text":"","code":"queryDgidb_V5_gene(genes)"},{"path":"https://jingl87.github.io/SINBA/reference/queryDgidb_V5_gene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"queryDgidb_V5_gene — queryDgidb_V5_gene","text":"genes character vector, query gene names.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/queryDgidb_V5_gene.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"queryDgidb_V5_gene — queryDgidb_V5_gene","text":"","code":"use_genes<-c(\"ATM\",\"BCL2L1\",\"LCK\",\"CDK4\") res<-queryDgidb_V5_gene (genes=use_genes)"},{"path":"https://jingl87.github.io/SINBA/reference/seed2partners_ftest.html","id":null,"dir":"Reference","previous_headings":"","what":"seed2partners_ftest — seed2partners_ftest","title":"seed2partners_ftest — seed2partners_ftest","text":"function perform fisher exact test seed partner driver regulons. SINBA_originalID,target_list,N,padjust_method=","code":""},{"path":"https://jingl87.github.io/SINBA/reference/seed2partners_ftest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"seed2partners_ftest — seed2partners_ftest","text":"","code":"seed2partners_ftest(   SINBA_originalID = NULL,   target_list = NULL,   N,   padjust_method = \"BH\" )"},{"path":"https://jingl87.github.io/SINBA/reference/seed2partners_ftest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"seed2partners_ftest — seed2partners_ftest","text":"SINBA_originalID character vector, seed-partner driver pairs, seed gene name partner gene name seperated colon. SINBA_originalID can manually created generated combineNet2target_list return_type=\"SINBA_originalID\". target_list list, driver--target list object. target_list generated get.combined.network contains driver gene regulons. N numeric, total unique genes whole network target_list. padjust_method character,type p value correction methods. User can choose c (\"holm\", \"hochberg\", \"hommel\", \"bonferroni\", \"BH\", \"\", \"fdr\", \"none\"). Default \"BH\".","code":""},{"path":"https://jingl87.github.io/SINBA/reference/seed2partners_ftest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"seed2partners_ftest — seed2partners_ftest","text":"return table fisher exact test.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/seed2partners_ftest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"seed2partners_ftest — seed2partners_ftest","text":"","code":"sinba_target_list<-combineNet2target_list(target_list=SINBA.par$combined.network$target_list,seed_name=\"LCK\",partner_name=c(\"BCL2\",\"FYN\"),return_type=\"SINBA_target_list\") #> Error: object 'SINBA.par' not found sinba_originalID<-combineNet2target_list(target_list=SINBA.par$combined.network$target_list,seed_name=\"LCK\",partner_name=c(\"BCL2\",\"FYN\"),return_type=\"SINBA_originalID\") #> Error: object 'SINBA.par' not found sinba_originalID<-as.character(sinba_originalID$originalID) #> Error: object 'sinba_originalID' not found N<-length(unique(c(SINBA.par$combined.network$network_dat$source,SINBA.par$combined.network$network_dat$target))) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'unique': object 'SINBA.par' not found  f_df<-seed2partners_ftest(SINBA_originalID=sinba_originalID,target_list=SINBA.par$combined.network$target_list,N=N) #> Error: object 'sinba_originalID' not found if (FALSE) { # \\dontrun{ } # }"},{"path":"https://jingl87.github.io/SINBA/reference/selectSP_driver_byDB.html","id":null,"dir":"Reference","previous_headings":"","what":"selectSP_driver_byDB — selectSP_driver_byDB","title":"selectSP_driver_byDB — selectSP_driver_byDB","text":"selectSP_driver_byDB used select driver genes based interaction drug information, including predicted blood-brain barrier penetration drug developing phase.","code":""},{"path":"https://jingl87.github.io/SINBA/reference/selectSP_driver_byDB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"selectSP_driver_byDB — selectSP_driver_byDB","text":"","code":"selectSP_driver_byDB(   genes = NULL,   select_type = NULL,   database = NULL,   select_phase = NULL )"},{"path":"https://jingl87.github.io/SINBA/reference/selectSP_driver_byDB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"selectSP_driver_byDB — selectSP_driver_byDB","text":"genes character vector genes targeting drug phase blood brain barrier penetration information queried. select_type character, drug information required. User can choose \"BP_prediction\" \"drug_phase\". database character, database used. \"BPdb\" contains drug blood brain barrier penetrantion information, others contain drug developing phase information. User can choose \"BPdb\", \"ChEMBL\",\"Repurposing_HUB\" \"Drugbank_V5.1\". select_phase character vector drug phases used. checking detailed phase information database, try call helper functions: ChEMBL_drugphase_levels(); Repurposing_HUB_drugphase_levels(); Drugbank_drugphase_levels().","code":""},{"path":"https://jingl87.github.io/SINBA/reference/selectSP_driver_byDB.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"selectSP_driver_byDB — selectSP_driver_byDB","text":"","code":"drugdb.preload() #> db not set, will use all the available databases: BPdb,ChEMBL,cMAP,Drugbank_V5.1,rDGIdb_1.8.0,Repurposing_HUB! #> main.dir not set, will use package directory: /private/var/folders/ks/by4rh1y10ssbd07q9z4ycwq40000gp/T/RtmpioPFV1/temp_libpath2365270c4416/SINBA/data #> out.dir not set, will use package directory: /private/var/folders/ks/by4rh1y10ssbd07q9z4ycwq40000gp/T/RtmpioPFV1/temp_libpath2365270c4416/SINBA/data #> Warning: cannot open compressed file '/private/var/folders/ks/by4rh1y10ssbd07q9z4ycwq40000gp/T/RtmpioPFV1/temp_libpath2365270c4416/SINBA/data/Drugdb_SINBA.rda', probable reason 'No such file or directory' #> Error in readChar(con, 5L, useBytes = TRUE): cannot open the connection genes<-c(\"MDM2\",\"CDK4\",\"CDK6\",\"ATM\",\"ATR\",\"BCL2\",\"BCL2L1\",\"HDAC6\",\"STAT3\",\"JAK2\") sp_df<-selectSP_driver_byDB(genes=genes,select_type=\"BP_prediction\",database=\"BPdb\") #> Error in is.null(genes) || length(genes) == 0 || !is.character(genes) ||     genes == \"\": 'length = 10' in coercion to 'logical(1)' sp_df<-selectSP_driver_byDB(genes=genes,select_type=\"drug_phase\",database=\"Drugbank_V5.1\") #> Error in is.null(genes) || length(genes) == 0 || !is.character(genes) ||     genes == \"\": 'length = 10' in coercion to 'logical(1)' sp_df<-selectSP_driver_byDB(genes=genes,select_type=\"drug_phase\",database=\"Drugbank_V5.1\",select_phase=\"approved\") #> Error in is.null(genes) || length(genes) == 0 || !is.character(genes) ||     genes == \"\": 'length = 10' in coercion to 'logical(1)' sp_df<-selectSP_driver_byDB(genes=genes,select_type=\"drug_phase\",database=\"ChEMBL\") #> Error in is.null(genes) || length(genes) == 0 || !is.character(genes) ||     genes == \"\": 'length = 10' in coercion to 'logical(1)' sp_df<-selectSP_driver_byDB(genes=genes,select_type=\"drug_phase\",database=\"Repurposing_HUB\") #> Error in is.null(genes) || length(genes) == 0 || !is.character(genes) ||     genes == \"\": 'length = 10' in coercion to 'logical(1)' if (FALSE) { # \\dontrun{ } # }"},{"path":"https://jingl87.github.io/SINBA/reference/sourceDatabases.html","id":null,"dir":"Reference","previous_headings":"","what":"sourceDatabases — sourceDatabases","title":"sourceDatabases — sourceDatabases","text":"available source database used DGIdb Users can select partial source database","code":""},{"path":"https://jingl87.github.io/SINBA/reference/sourceDatabases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sourceDatabases — sourceDatabases","text":"","code":"sourceDatabases()"},{"path":"https://jingl87.github.io/SINBA/reference/sourceDatabases.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sourceDatabases — sourceDatabases","text":"","code":"sourceDatabases() #>  [1] \"CGI\"                             \"CIViC\"                           #>  [3] \"COSMIC\"                          \"CancerCommons\"                   #>  [5] \"ChemblInteractions\"              \"ClearityFoundationBiomarkers\"    #>  [7] \"ClearityFoundationClinicalTrial\" \"DTC\"                             #>  [9] \"DoCM\"                            \"DrugBank\"                        #> [11] \"FDA\"                             \"GuideToPharmacology\"             #> [13] \"JAX-CKB\"                         \"MyCancerGenome\"                  #> [15] \"MyCancerGenomeClinicalTrial\"     \"NCI\"                             #> [17] \"OncoKB\"                          \"PharmGKB\"                        #> [19] \"TALC\"                            \"TEND\"                            #> [21] \"TTD\"                             \"TdgClinicalTrial\""},{"path":"https://jingl87.github.io/SINBA/news/index.html","id":"sinba-development-version","dir":"Changelog","previous_headings":"","what":"SINBA (development version)","title":"SINBA (development version)","text":"Initial CRAN submission.","code":""}]
